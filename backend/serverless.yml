service: pii-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "comprehend:DetectPiiEntities"
          Resource: "*"
        - Effect: Allow
          Action:
            - "comprehend:ContainsPiiEntities"
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Scan
          Resource:
            - Fn::GetAtt: [NotesTable, Arn]

functions:
  detectPii:
    handler: handlers/detectPii.handler
    environment:
      NOTES_TABLE: ${self:custom.notesTable}
    events:
      - http:
          path: detect
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getNotes:
    handler: handlers/getNotes.handler
    environment:
      NOTES_TABLE: ${self:custom.notesTable}
    events:
      - http:
          path: notes
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
plugins:
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    exclude: []
  notesTable: ${self:service}-notes-${opt:stage, 'dev'}

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.notesTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
